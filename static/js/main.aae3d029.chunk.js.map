{"version":3,"sources":["logo.svg","set3Images.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","set3Images","id","src","title","cost","emptyImg","money","ChampHand","props","state","tiles","randomizeChamps","bind","randomChamps","i","push","Math","floor","random","length","console","log","this","setState","onReroll","map","tile","key","process","alt","React","Component","RerollButton","reroll","onClick","ChampTile","hasChamp","buyChamp","App","className","logo","href","target","rel","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uGAAAA,EAAOC,QAAU,IAA0B,kC,4MCS5BC,EATI,CACjB,CAAEC,GAAI,EAAGC,IAAK,yBAA0BC,MAAO,QAASC,KAAM,KAC9D,CAAEH,GAAI,EAAGC,IAAK,wBAAyBC,MAAO,OAAQC,KAAM,GAC5D,CAAEH,GAAI,EAAGC,IAAK,yBAA0BC,MAAO,QAASC,KAAM,GAC9D,CAAEH,GAAI,EAAGC,IAAK,wBAAyBC,MAAO,OAAQC,KAAM,GAC5D,CAAEH,GAAI,EAAGC,IAAK,gCAAiCC,MAAO,eAAgBC,KAAM,GAC5E,CAAEH,GAAI,EAAGC,IAAK,8BAA+BC,MAAO,aAAcC,KAAM,ICDpEC,G,MAAWL,EAAW,GAAGE,KAC3BI,EAAQ,G,IA6BNC,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CAACC,MAAM,CAClB,CAAET,GAAI,EAAGC,IAAK,wBAAyBC,MAAO,OAAQC,KAAM,GAC5D,CAAEH,GAAI,EAAGC,IAAK,yBAA0BC,MAAO,QAASC,KAAM,GAC9D,CAAEH,GAAI,EAAGC,IAAK,wBAAyBC,MAAO,OAAQC,KAAM,GAC5D,CAAEH,GAAI,EAAGC,IAAK,gCAAiCC,MAAO,eAAgBC,KAAM,GAC5E,CAAEH,GAAI,EAAGC,IAAK,8BAA+BC,MAAO,aAAcC,KAAM,KAE1E,EAAKO,gBAAkB,EAAKA,gBAAgBC,KAArB,gBATN,E,8DAiBjB,IADA,IAAIC,EAAe,GACXC,EAAI,EAAGA,EAAI,EAAGA,IACpBD,EAAaE,KAAKf,EAAWgB,KAAKC,MAAMD,KAAKE,UAAYlB,EAAWmB,OAAS,IAAM,IAErFC,QAAQC,IAAIR,GACZS,KAAKC,SAAS,CAACb,MAAOG,IAEtBO,QAAQC,IAAIC,KAAKb,MAAMC,S,4EAUvB,OACE,6BACE,kBAAC,EAAD,CAAcc,SAAUF,KAAKX,kBAC5BW,KAAKb,MAAMC,MAAMe,KAAI,SAACC,EAAMZ,GAAP,OACpB,kBAAC,EAAD,CAAWa,IAAKb,EAAGZ,IAAK0B,cAAyBF,EAAKxB,IAAK2B,IAAKH,EAAKvB,MAAOC,KAAMsB,EAAKtB,e,GAtCzE0B,IAAMC,WAgDxBC,E,kDACJ,WAAYxB,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAQ,GACb,EAAKwB,OAAS,EAAKA,OAAOrB,KAAZ,gBAHE,E,qDAObN,GAAS,IACVc,QAAQC,IAAI,aACZf,GAAS,EACTgB,KAAKd,MAAMgB,c,+BAKb,OACE,4BAAQU,QAASZ,KAAKW,QAAtB,c,GAjBqBH,IAAMC,WAsB3BI,E,kDACJ,WAAY3B,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CAAC2B,UAAU,GACxB,EAAKC,SAAW,EAAKA,SAASzB,KAAd,gBAHC,E,uDAOdU,KAAKb,MAAM2B,UAAY9B,GAASgB,KAAKd,MAAMJ,OAC5CkB,KAAKC,SAAS,CAACa,UAAU,IACzB9B,GAASgB,KAAKd,MAAMJ,Q,+BAKtB,OACE,gCAAQ,yBAAKF,IAAKoB,KAAKb,MAAM2B,SAAWd,KAAKd,MAAMN,IAAM0B,cAAyBvB,EAAUwB,IAAKP,KAAKd,MAAMqB,IAAKK,QAASZ,KAAKe,gB,GAhB7GP,IAAMC,WAqBfO,EArHf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKrC,IAAKsC,IAAMD,UAAU,WAAWV,IAAI,SACzC,mCACO,4CADP,wBAGA,uBACEU,UAAU,WACVE,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,gBASF,kCAEA,kBAAC,EAAD,QChBcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzC,QAAQyC,MAAMA,EAAMC,c","file":"static/js/main.aae3d029.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","const set3Images = [\r\n  { id: 0, src: '/assets/set3/empty.png', title: 'empty', cost: 100000, },\r\n  { id: 1, src: '/assets/set3/ahri.png', title: 'ahri', cost: 2, },\r\n  { id: 2, src: '/assets/set3/annie.png', title: 'annie', cost: 2 },\r\n  { id: 3, src: '/assets/set3/ashe.png', title: 'ashe', cost: 3 },\r\n  { id: 4, src: '/assets/set3/aurelion-sol.png', title: 'aurelion-sol', cost: 5 },\r\n  { id: 5, src: '/assets/set3/blitzcrank.png', title: 'blitzcrank', cost: 2 },\r\n]\r\n\r\nexport default set3Images;\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport set3Images from './set3Images';\nimport './App.css';\n\nconst emptyImg = set3Images[0].src;\nlet money = 50;\nlet level = 0;\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n      <h1>Hi</h1>\n\n      <ChampHand/>\n    </div>\n  );\n}\n\n\n\nclass ChampHand extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {tiles:[\n      { id: 1, src: '/assets/set3/ahri.png', title: 'ahri', cost: 2, },\n      { id: 2, src: '/assets/set3/annie.png', title: 'annie', cost: 2 },\n      { id: 3, src: '/assets/set3/ashe.png', title: 'ashe', cost: 3 },\n      { id: 4, src: '/assets/set3/aurelion-sol.png', title: 'aurelion-sol', cost: 5 },\n      { id: 5, src: '/assets/set3/blitzcrank.png', title: 'blitzcrank', cost: 2 },\n    ]};\n    this.randomizeChamps = this.randomizeChamps.bind(this);\n\n  }\n\n\n   randomizeChamps(){\n    //chooses 5 champs based on table probabilities and level\n    let randomChamps = [];\n    for(let i = 0; i < 5; i++){\n      randomChamps.push(set3Images[Math.floor(Math.random() * (set3Images.length - 1)) + 1]);\n    }\n    console.log(randomChamps);\n    this.setState({tiles: randomChamps});\n    // this.setState({tiles: [{ id: 1, src: '/assets/set3/ahri.png', title: 'ahri', cost: 2, }]});\n    console.log(this.state.tiles);\n  }\n\n  componentDidMount(){\n    //roll the first random randomChamps\n    // alert(\"Hey\");\n    // this.randomizeChamps();\n  }\n\n  render() {\n    return (\n      <div>\n        <RerollButton onReroll={this.randomizeChamps}/>\n        {this.state.tiles.map((tile, i) => (\n          <ChampTile key={i} src={process.env.PUBLIC_URL + tile.src} alt={tile.title} cost={tile.cost}/>\n        ))}\n\n      </div>\n    )\n  }\n}\n\n\n\nclass RerollButton extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {};\n    this.reroll = this.reroll.bind(this);\n  }\n\n  reroll() {\n    if(money >= 2){\n      console.log(\"rerolling\");\n      money -= 2;\n      this.props.onReroll();\n    }\n  }\n\n  render() {\n    return (\n      <button onClick={this.reroll}>Reroll</button>\n    )\n  }\n}\n\nclass ChampTile extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {hasChamp: true};\n    this.buyChamp = this.buyChamp.bind(this);\n  }\n\n  buyChamp() {\n    if(this.state.hasChamp && money >= this.props.cost){\n      this.setState({hasChamp: false});\n      money -= this.props.cost;\n    }\n  }\n\n  render() {\n    return (\n      <button><img src={this.state.hasChamp ? this.props.src : process.env.PUBLIC_URL + emptyImg} alt={this.props.alt} onClick={this.buyChamp}/></button>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}